#Import libraries
from math import atan2
import numpy as np
import math as m
import serial
import time
import random
import matplotlib.pyplot as plt

#Check whether connected to an Arduino
try:
    arduino = serial.Serial(port='COM3', baudrate=115200, timeout=.1)
except Exception as e:
    print("No arduino connected, or wrong serial port: {}".format(e))
    arduino = None
#Define Modified Dennavit-Hartenberg Parameters
a = np.array([0, 45, 95, 18, 0, 0])
alpha = np.radians(np.array([0, -90, 180, 90, -90, 90]))
d = np.array([120, 0, 0, 167, 0, 30])
theta = np.radians(np.array([0, -90, 0, 0, 0, 0]))

#Turn Inverse kinematics validation mode on or off
IK_validate = True
#Print MDH parameters
print(f'MDH Parameters:')
for i in range(6):
    print(f'{np.round([a[i], alpha[i], d[i], theta[i]], 0)}')
print(f'\n')

#Define end-effector matrix
end_effector_matrix = np.array([[1, 0, 0, 0],
                                [0, 1, 0, 0],
                                [0, 0, 1, 0],
                                [0, 0, 0, 1]])

#######################################
#FORWARD KINEMATIK THETA 1-6
#######################################

theta[0] += np.radians(0)       #theta1
theta[1] += np.radians(0)       #theta2
theta[2] += np.radians(0)       #theta3
theta[3] += np.radians(0)    #theta4
theta[4] += np.radians(0)  + np.radians(0.000001)     #theta5
theta[5] += np.radians(0)    #theta6

######################################
#Random number generator for FK validating
######################################
if False:
    theta[0] += np.radians(random.randint(-45, 45))       #theta1
    theta[1] += np.radians(random.randint(-45, 45))       #theta2
    theta[2] += np.radians(random.randint(-45, 45))       #theta3
    theta[3] += np.radians(random.randint(-45, 45))       #theta4
    theta[4] += np.radians(random.randint(-45, 45))       #theta5
    theta[5] += np.radians(random.randint(-45, 45))       #theta6
    print(f' theta1: {np.degrees(np.round(theta[0], 2))}, theta2: {np.degrees(np.round(theta[1], 2))}, theta3: {np.degrees(np.round(theta[2], 2))}')
    print(f'theta4: {np.degrees(np.round(theta[3], 2))}, theta5: {np.degrees(np.round(theta[4], 2))}, theta6: {np.degrees(np.round(theta[5], 2))}')
if theta[4] == 0:
    raise ValueError(f'Singularity error, when Theta5 = 0')

########################################
#Invers kinematik x,y,z,roll, pitch, yaw
########################################

X = 290.78
Y = 200
Z = 251.9
Roll = 0
Pitch = -80
Yaw = -180

########################################

#Class for creating transformation matrices from MDH parameters
class MDH_Parameters:

    def __init__(self,a,alpha,d,theta, end_effector):
        self.a, self.alpha, self.d, self.theta = a, alpha, d, theta
        self.transforms, self.end_effector = [], end_effector
        #Create a transformation matrix for each joint
        for i in range(6):
            T_i = np.array([[np.cos(theta[i]),-np.sin(theta[i]),0,a[i]],
                      [np.sin(theta[i]) * np.cos(alpha[i]), np.cos(theta[i]) * np.cos(alpha[i]), -np.sin(alpha[i]), -d[i] * np.sin(alpha[i])],
                      [np.sin(theta[i]) * np.sin(alpha[i]), np.cos(theta[i]) * np.sin(alpha[i]), np.cos(alpha[i]), d[i] * np.cos(alpha[i])],
                      [0,0,0,1]])
            #Add each transformatiom matrix to transform array
            self.transforms.append(T_i)
        #Create transformation matrix from base to end-effector
        T01 = self.transforms[0]
        T02 = T01 @ self.transforms[1]
        T03 = T02 @ self.transforms[2]
        T04 = T03 @ self.transforms[3]
        T05 = T04 @ self.transforms[4]
        T06 = T05 @ self.transforms[5]
        self.T0E = T06 @ self.end_effector

    #This function prints all the calculated transforms
    def print_transforms(self):
        for i, T in enumerate(self.transforms):
            print(f"T_{i + 1}:\n {np.round(T, 4)} \n")


    #This function calculates the forward kinematics
    def calc_fk(self):
        #Calculate Roll, Pitch, Yaw
        yaw = m.atan2(self.T0E[1, 0], self.T0E[0, 0])
        pitch = m.atan2(-self.T0E[2, 0], m.sqrt(self.T0E[0, 0] ** 2 + self.T0E[1, 0] ** 2))
        roll = m.atan2(self.T0E[2, 1], self.T0E[2, 2])
        #Print X,Y,Z,R,P,Y
        print(f'(X: {np.round(self.T0E[0,3],4)}, Y: {np.round(self.T0E[1,3], 4)}, Z: {np.round(self.T0E[2,3], 4)} '
              f', Roll: {np.round(np.degrees(roll),4)}, Pitch: {np.round(np.degrees(pitch), 4)}, Yaw: {np.round(np.degrees(yaw), 4)})')

# This class calculates the inverse kinematics using predefined X,Y,Z,R,P,Y
# Or using the transformation matrix from forward kinematics, if IK_Validate is True
class Inverse_Kinematik:
    def __init__(self,transform,X, Y, Z, Roll, Pitch, Yaw, a, d, alpha, IK_validate, end_effector):
        #Self.transform is T0E From FK
        self.transform, self.end_effector = transform, end_effector
        self.X, self.Y, self.Z = X, Y, Z
        self.Roll, self.Pitch, self.Yaw = np.radians(Roll), np.radians(Pitch), np.radians(Yaw)
        self.a, self.d, self.alpha, self.theta= a, d, alpha, []
        #Create an offset matrix to find the location of the wrist joint
        self.offset = np.array([[1, 0, 0, 0],
                                [0, 1, 0, 0],
                                [0, 0, 1, -80],
                                [0, 0, 0, 1]])

        #Create the rotation matrix from predefined R,P,Y
        ca, sa, cb = np.cos(self.Yaw), np.sin(self.Yaw), np.cos(self.Pitch)
        sb, cg, sg = np.sin(self.Pitch), np.cos(self.Roll), np.sin(self.Roll)

        self.Rzyx = np.array([
            [ca * cb, ca * sb * sg - sa * cg, ca * sb * cg + sa * sg],
            [sa * cb, sa * sb * sg + ca * cg, sa * sb * cg - ca * sg],
            [-sb, cb * sg, cb * cg]
        ])
        #If IK_validate is True T0E matrix ii used
        #Otherwise create a transformation matrix from Rzyx and X,Y,Z coordinates
        if not IK_validate:
            self.transform = np.array([[self.Rzyx[0,0], self.Rzyx[0,1], self.Rzyx[0,2], self.X],
                                       [self.Rzyx[1,0], self.Rzyx[1,1], self.Rzyx[1,2], self.Y],
                                       [self.Rzyx[2,0], self.Rzyx[2,1], self.Rzyx[2,2], self.Z],
                                       [0,              0,              0,                  1]])
        # Multiply the offset to ignore the last 3 joints and get the matrix which is
        # from base to wrist
        self.T0W = self.transform @ self.offset
        self.X = float(np.sqrt(self.T0W[0, 3] ** 2 + self.T0W[1, 3] ** 2) - a[1])
        self.Z = float(self.T0W[2, 3] - self.d[0])
        self.l1 = float(a[2])
        self.l2 = float(np.sqrt(self.a[3]**2 + self.d[3]**2))
        self.l3 = np.sqrt(self.X**2 + self.Z**2)

    def calc_IK(self):
        #Calculate theta1 using the T0W matrix, and add to an array
        theta1 = atan2(self.T0W[1, 3], self.T0W[0, 3])
        self.theta.append(np.degrees(theta1))

        #Calculate theta2
        cos = (self.l1**2 + self.l3**2 - self.l2**2) / (2 * self.l1 * self.l3)
        theta2 = -np.arctan2(self.Z, self.X) - np.arccos(cos)
        self.theta.append(np.degrees(theta2))
        #Calculate theta3
        cos= np.clip(((self.l1**2 + self.l2**2 - self.l3**2)/(2*self.l1*self.l2)), -1, 1)
        triangle = np.arccos(self.d[3]/self.l2)
        theta3 = m.pi/2 - (triangle + m.pi - np.arccos(cos))
        self.theta.append(np.degrees(theta3))
        #From theta1,2,3 create matrices and multiply with the created transform
        self.positionMatrices = []
        for i in range(3):#Generate transformation matrices for theta1-3
            T_i = np.array(
                    [[np.cos(np.radians(self.theta[i])),                         -np.sin(np.radians(self.theta[i])),                          0,                      self.a[i]                        ],
                    [np.sin(np.radians(self.theta[i])) * np.cos(self.alpha[i]), np.cos(np.radians(self.theta[i])) * np.cos(self.alpha[i]), -np.sin(self.alpha[i]), -self.d[i] * np.sin(self.alpha[i])],
                    [np.sin(np.radians(self.theta[i])) * np.sin(self.alpha[i]), np.cos(np.radians(self.theta[i])) * np.sin(self.alpha[i]), np.cos(self.alpha[i]),   self.d[i] * np.cos(self.alpha[i])],
                    [0,                                                          0,                                                         0,                      1]                               ])
            self.positionMatrices.append(T_i)
        # Calculate the transformation matrix from base to theta2
        T_02 = self.positionMatrices[0] @ self.positionMatrices[1]
        # Calculate the transformation matrix from base to theta3
        T_03 = T_02 @ self.positionMatrices[2]
        # Calculate the transformation matrix from theta3 to theta6
        # This is because now we dont care about the postion anymore now just the orientation, and thus theta,4,5,6
        self.IK_orientation = np.linalg.inv(T_03) @ self.transform

        # Calculate theta4-6 from IK_orientation
        theta4 = np.arctan2(self.IK_orientation[2, 2], self.IK_orientation[0, 2])
        theta5 = m.pi - np.arctan2(np.sqrt(self.IK_orientation[1,0]**2 + self.IK_orientation[1,1]**2),self.IK_orientation[1,2])
        theta6 = np.arctan2(-self.IK_orientation[1, 1], self.IK_orientation[1, 0])

        self.theta.append(np.degrees(theta4))
        self.theta.append(np.degrees(theta5))
        self.theta.append(np.degrees(theta6))
        for i in range(3, 6):          #Generate transformation matrices for theta4-6
            T_i = np.array(
                    [[np.cos(np.radians(self.theta[i])),                         -np.sin(np.radians(self.theta[i])),                          0,                      self.a[i]                        ],
                    [np.sin(np.radians(self.theta[i])) * np.cos(self.alpha[i]), np.cos(np.radians(self.theta[i])) * np.cos(self.alpha[i]), -np.sin(self.alpha[i]), -self.d[i] * np.sin(self.alpha[i])],
                    [np.sin(np.radians(self.theta[i])) * np.sin(self.alpha[i]), np.cos(np.radians(self.theta[i])) * np.sin(self.alpha[i]), np.cos(self.alpha[i]),   self.d[i] * np.cos(self.alpha[i])],
                    [0,                                                          0,                                                         0,                      1]                               ])
            self.positionMatrices.append(T_i)
        T_04 = T_03 @ self.positionMatrices[3]
        T_05 = T_04 @ self.positionMatrices[4]
        T_06 = T_05 @ self.positionMatrices[5]
        T_0E = T_06 @ np.linalg.inv(self.offset)
        print(f'T_0E: \n {np.round(T_0E,4)}')
        #Finally create a transformation matrix with all the new theta values and the end-effector offset



######################################
#Arduino
######################################

#This function is responsible for sending and recieving data from the Arduino
def write_read(x):
    arduino.write(bytes(str(np.round(x)) + '\n', 'utf-8'))
    # time.sleep(0.01)
    # data = arduino.readline()
    # data = data.decode('utf-8').strip()
    #return data

def write_read2(theta):
    # Construct the string with all theta values separated by commas
    theta_str = ','.join([str(np.round(t)) for t in theta]) + '\n'
    arduino.write(bytes(theta_str, 'utf-8'))
    time.sleep(0.01)
    data = arduino.readline()
    data = data.decode('utf-8').strip()
    return data


def Arduino_read():
    data = "0"
    while data != "Done":
        time.sleep(0.01)
        data = arduino.readline()
        data = data.decode('utf-8').strip()
        if data:
            print(f'\n {data}')

#The Arduino needs a couple of seconds to initialize, so to ensure
# it is ready to receive data, a delay of 3 seconds is added
# But it is annoying and unnecesarry when no Arduino is connected
if arduino is not None:
    time.sleep(3)
MDH = MDH_Parameters(a, alpha, d, theta, end_effector_matrix)
MDH.calc_fk()
IK = Inverse_Kinematik(MDH.T0E,X,Y,Z,Roll,Pitch, Yaw, a, d, alpha, IK_validate, end_effector_matrix)
IK.calc_IK()
#MDH.print_transforms()
#MDH.extra_link()
print(np.round(IK.theta,2))
print(np.degrees(np.round(theta,2)))
#Ma = Motor_Angle(IK.theta)
#Ma.extra_link()
#Ma.calc_q()
#print(f'q1: {np.round(Ma.q[0], 4)}, q2: {np.round(Ma.q[1], 4)}, q3_a: {np.round(Ma.q[2], 4)}, q4: {np.round(Ma.q[3], 4)}, q5: {np.round(Ma.q[4], 4)}, q6: {Ma.q[5]}')

def convertToJointSpace(cartesianArray):   #Function not implemented
    global X, Y, Z, Roll, Pitch, Yaw
    X = cartesianArray[0]
    Y = cartesianArray[1]
    Z = cartesianArray[2]
    Roll = cartesianArray[3]
    Pitch = cartesianArray[4]
    Yaw = cartesianArray[5]
    converted = [
        0,#IK.theta[0],
        0,#IK.theta[1],
        0,#IK.theta[2],
        0,#IK.theta[3],
        0,#IK.theta[4],
        0#IK.theta[5]
    ]
    return converted

test=IK.theta[0]
print(f'test{test}')
print(IK.theta[0])

######################################
#Trajectory planing
######################################

totalDuration = 0
plannedTheta = [[] for i in range(6)]      #Nested array to store calculated values
samplingFrequency = 64      #Define the number of point desired to generated per time unit

class interpolation:
    def __init__(self , startValue , endValue , duration , cartesian):  #Declare attributes
        self.startValue = startValue
        self.endValue = endValue
        self.duration = duration
        self.cartesian = cartesian

    def cubic(self , startValue_dif , endValue_dif):    #Method to calculate cubic path
        global totalDuration
        totalDuration += self.duration      #Adds to total duration of movements - used for generating t values to plot
        cubicSection = [[] for _ in range(6)]      #Declare local variable to temporarily store calculated values
        for j in range(round(self.duration * samplingFrequency)):      #Outer for-loop - runs as many times as there are points to be calculated in the duration of the motion
            for i in range(6):      #Inner for-loop - runs one time for each theta value
                t=j/samplingFrequency      #Make sure that one t unit is one in later calculations
                #Coefficients is calculated:
                a_0 = self.startValue[i]
                a_1 = startValue_dif[i]
                a_2 = (3 / self.duration**2) * (self.endValue[i] - self.startValue[i]) - (2 / self.duration) * startValue_dif[i] - (1 / self.duration) * endValue_dif[i]
                a_3 = (-2 / self.duration**3) * (self.endValue[i] - self.startValue[i]) + (1 / self.duration**2) * (endValue_dif[i] + startValue_dif[i] )
                #value is calculated and added to local variable
                cubicSection[i].append(a_0 + a_1 * t + a_2 * t ** 2 + a_3 * t ** 3)
        if self.cartesian:      #Check if it is desired to be in Cartesian space
            convertedCubicSection = convertToJointSpace(cubicSection)      #Convert values - not fully implemented
            for h in range(6):
                plannedTheta[h].extend(convertedCubicSection[h])      #Adds calculated values to plannedTheta
        else:
            for h in range(6):
                plannedTheta[h].extend(cubicSection[h])      #Adds calculated values to plannedTheta


    def linear(self , acceleration):    #Method to calculate linear path
        global totalDuration
        totalDuration += self.duration      #Adds to total duration of movements - used for generating t values to plot
        for i in range(6):      #Check if any acceleration is to low to generate a linear section
            if acceleration[i] < 4*(self.endValue[i] - self.startValue[i])/self.duration ** 2:
                print(f'Error - Linear - Acceleration to low')
        linearSection = [[] for _ in range(6)]      #Declare local variable to temporarily store calculated values
        for j in range(round((self.duration) * samplingFrequency)):      #Outer for-loop - runs as many times as there are points to be calculated in the duration of the motion
            for i in range(6):      #Inner for-loop - runs one time for each theta value
                t=j/samplingFrequency      #Make sure that one t unit is one in later calculations
                timeBlend = (self.duration / 2) - (m.sqrt(acceleration[i] ** 2 * self.duration ** 2 - 4 * acceleration[i] * (self.endValue[i] - self.startValue[i]))) / (2 * acceleration[i])      #Calculate time of a blend
                valueBlend = 0.5*acceleration[i]*timeBlend**2+self.startValue[i]      #Calculate the value a the point where the blend in ends and the linear part begin
                if  j <= (round((timeBlend) * samplingFrequency)):      #Calculate the value if it is a blend in
                    calc=self.startValue[i] + 0.5*acceleration[i]*t**2
                    linearSection[i].append(calc)
                elif (round((timeBlend) * samplingFrequency)) < j < (round((self.duration) * samplingFrequency)-(round((timeBlend) * samplingFrequency))):      #Calculate the value if it is the linear part
                    linearSection[i].append(valueBlend+acceleration[i]*timeBlend*(t-timeBlend))
                else:      #Calculate the value if it is a blend out
                    linearSection[i].append(self.endValue[i] - 0.5*acceleration[i]*(self.duration-t)**2)
        if self.cartesian:      #Check if it is desired to be in Cartesian space
            convertedLinearSection = convertToJointSpace(linearSection)      #Convert values - not fully implemented
            for h in range(6):
                plannedTheta[h].extend(convertedLinearSection[h])      #Adds calculated values to plannedTheta
        else:
            for h in range(6):
                plannedTheta[h].extend(linearSection[h])      #Adds calculated values to plannedTheta

#### Planning ####

### Plot test ###
move001 = interpolation( [10, -90,0,0,0,0] , [65, -63,-85,-89,89,45]  , 7 , False)#[-45, -30,-60,-15,90,0]
#move001.cubic([0,0,0,0,0,0],[0,0,0,0,0,0])
move001.linear([20,50,50,50,50,50])
move002 = interpolation(  [65, -63,-85,-89,89,45]  ,[0,0,0,0,0,0], 7 , False)#[-45, -30,-60,-15,90,0]
move002.cubic([0,0,0,0,0,0],[0,0,0,0,0,0])

# ### test 1 & test 2 use first half ###
# #From position 0 to left near syringe
# move001 = interpolation( [0, -90,0,0,0,0] , [9, -82,-30,11,30,-20]  , 3 , False)
# move001.cubic([0,0,0,0,0,0],[0,0,0,0,0,0])
# #Near left syringe to left syringe
# move002 = interpolation( move001.endValue , [8.25, -45,-14.93,11.07,30,-20]  , 0.5 , False)
# move002.cubic([0,0,0,0,0,0],[0,0,0,0,0,0])
# #lift left syringe
# move003 = interpolation( move002.endValue , [9, -70,0,11,2,-20]  , 0.5 , False)
# move003.cubic([0,0,0,0,0,0],[0,0,0,0,0,0])
# #From left syringe to lower patch (with viapoint)
# move004 = interpolation(move003.endValue , [0,-90,0,0,0,0] , 2 , False)
# move004.cubic([0,0,0,0,0,0],[0,0,0,0,0,0])
# #Viapoint
# move004v5 = interpolation( move004.endValue , [10,-84,-67,7,75,-2]   , 2 , False)
# move004v5.cubic([0,0,0,0,0,0],[0,0,0,0,0,0])
# #Stay
# move005 = interpolation(move004v5.endValue , move004.endValue  , 2 , False)
# move005.cubic([0,0,0,0,0,0],[0,0,0,0,0,0])
# #From lower patch to left syringe (with viapoint)
# move005v6 = interpolation( move005.endValue , [0,-90,0,0,0,0]   , 2 , False)
# move005v6.cubic([0,0,0,0,0,0],[0,0,0,0,0,0])
# #Viapoint
# move006 = interpolation( move005v6.endValue , [9, -70,0,11,2,-20]  , 3 , False)
# move006.cubic([0,0,0,0,0,0],[0,0,0,0,0,0])
# #Above left syringe to left syringe
# move007 = interpolation( move006.endValue , [8.25, -44.93,-14.93,11.07,30,-20]  , 0.5 , False)
# move007.cubic([0,0,0,0,0,0],[0,0,0,0,0,0])
# #Away from left syringe
# move008 = interpolation( move007.endValue , [9, -82,-30,11,30,-20]  , 0.5 , False)
# move008.cubic([0,0,0,0,0,0],[0,0,0,0,0,0])
# #viapunkt til syringnedre
# move008v9 = interpolation( move008.endValue , [0,-90,0,0,0,0]  , 3 , False)
# move008v9.cubic([0,0,0,0,0,0],[0,0,0,0,0,0])                       # dur 19
##Syringe 2
# #fra position 0 til nær nedre sprøjte
# move009 = interpolation( move008v9.endValue , [9,-90,-45,11,30,-2] , 3 , False)
# move009.cubic(0,0)
# #nær nedre sprøjte til nedre sprjøjte
# move010 = interpolation( move009.endValue , [9,-62,-72,9,40,-15]  , 0.5 , False)
# move010.cubic(0,0)
# #løft nedre spjøjte
# move011 = interpolation( move010.endValue , [9, -82,-30,11,30,-20]  , 0.5 , False)
# move011.cubic(0,0)
# #fra venstre sprøjte til patchnedre
# move012 = interpolation(move011.endValue , [0,-90,0,0,0,0] , 2 , False)
# move012.cubic(0,0)
# #viapunkt
# move012v13 = interpolation( move012.endValue , [10,-84,-67,7,75,-2]   , 2 , False)
# move012v13.cubic(0,0)
# #bliv
# move013 = interpolation(move012v13.endValue , move004.endValue  , 2 , False)
# move013.cubic(0,0)
# #viapunkt
# move013v14 = interpolation( move013.endValue , [0,-90,0,0,0,0]   , 2 , False)
# move013v14.cubic(0,0)
# #fra nær nedre patch til over venstre sprøjte
# move014 = interpolation( move013v14.endValue , [9, -82,-30,11,30,-20] , 3 , False)
# move014.cubic(0,0)
# #over venstre sprøjte til venstre sprjøjte
# move015 = interpolation( move014.endValue , [9,-62,-72,9,40,-15]  , 0.5 , False)
# move015.cubic(0,0)
# #slip venstre spjøjte
# move016 = interpolation( move015.endValue , [9,-90,-45,11,30,-2]  , 0.5 , False)
# move016.cubic(0,0)
# #viapunkt til syringnedre
# move0017 = interpolation( move016.endValue , [0,-90,0,0,0,0]  , 3 , False)
# move0017.cubic(0,0)

# ### Test 3 - The manipulator must be able to move to different locations within 2 mm ###
# #Move to point 1
# move001 = interpolation( [0, -90,0,0,0,0] , [-89, -63,-85,-89,89,45]  , 0.2 , False)#[-45, -30,-60,-15,90,0]
# move001.cubic([0,0,0,0,0,0],[0,0,0,0,0,0])
# #move001.linear([30,50,50,50,50,50])
# #Stay at point 1
# move001b = interpolation( move001.endValue , [-89, -63,-85,-89,89,45]  , 1 , False)#[-45, -30,-60,-15,90,0]
# move001b.cubic([0,0,0,0,0,0],[0,0,0,0,0,0])
# #From point 1 to 2
# move002 = interpolation( move001b.endValue , [0, -65,-50,0,60,0] , 1.4 , False)
# move002.cubic([0,0,0,0,0,0],[0,0,0,0,0,0])
# #Stay at point 2
# move002b = interpolation( move002.endValue , [0, -65,-50,0,60,0] , 1 , False)
# move002b.cubic([0,0,0,0,0,0],[0,0,0,0,0,0])
# #From point 2 to 3
# move003 = interpolation( move002b.endValue , [-57, -27,-25,-62,71,45]  , 1.4 , False)
# move003.cubic([0,0,0,0,0,0],[0,0,0,0,0,0])
# #stay
# move003 = interpolation( move003.endValue , [-57, -27,-25,-62,71,45]  , 1 , False)
# move003.cubic([0,0,0,0,0,0],[0,0,0,0,0,0])

# ### Test 4 - The manipulator shall maintain an appropriate speed during movement ###
# #Move to point 1
# move001 = interpolation( [0, -90,0,0,0,0] , [-89, -63,-85,-89,89,45]  , 0.4 , False)#[-45, -30,-60,-15,90,0]
# move001.cubic([0,0,0,0,0,0],[0,0,0,0,0,0])
# #move001.linear([30,50,50,50,50,50])
# #Stay at point 1
# move001b = interpolation( move001.endValue , [-89, -63,-85,-89,89,45]  , 4.6 , False)#[-45, -30,-60,-15,90,0]
# move001b.cubic([0,0,0,0,0,0],[0,0,0,0,0,0])
# #From point 1 to 2
# move002 = interpolation( move001b.endValue , [0, -65,-50,0,60,0] , 1 , False)
# move002.cubic([0,0,0,0,0,0],[0,0,0,0,0,0])
# #Stay at point 2
# move002b = interpolation( move002.endValue , [0, -65,-50,0,60,0] , 2 , False)
# move002b.cubic([0,0,0,0,0,0],[0,0,0,0,0,0])
# #From point 2 to 3
# move003 = interpolation( move002b.endValue , [-57, -27,-25,-62,71,45]  , 1.4 , False)
# move003.cubic([0,0,0,0,0,0],[0,0,0,0,0,0])

#### plot ####
t_values = np.linspace(0, totalDuration , totalDuration*samplingFrequency)

plotGraph = True
plot = 1

if plotGraph and plot in [1, 2, 3, 4, 5, 6]:
    theta_list = [plannedTheta[0],plannedTheta[1],plannedTheta[2],plannedTheta[3],plannedTheta[4],plannedTheta[5]]
    theta_value = theta_list[plot - 1]
    plt.figure(figsize=(8, 5))
    plt.plot(t_values, plannedTheta[0] , color="blue")
    plt.xlabel("t")
    plt.ylabel(f'Theta {plot}')
    plt.title("Trajectory")
    plt.grid()
    plt.show()

######################################
#Sending to Arduino
######################################

#This statements sends the data to the Arduino, and prints the response.
if arduino is not None:
    for j in range(len(plannedTheta[0])):
        for i in range(len(plannedTheta)):
             write_read(plannedTheta[i][j])

    #write_read2(IK.theta)
        Arduino_read()
